文件工具
可以操作较低层的基于描述符的文件(os),复制，移除，移动和收集文件，
也可以进行数据和对象的持久性(shelve,pickle,SQL)

Unicode编码
2016年6月 Unicode 9.0
使用16位的编码空间。也就是每个字符占用2个字节
这样理论上一共最多可以表示216（即65536）个字符。基本满足各种语言的使用。
在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对Unicode编码的实现方式有所不同。Unicode的实现方式称为Unicode转换格式（Unicode Transformation Format，简称为UTF）
例如，如果一个仅包含基本7位ASCII字符的Unicode文件，如果每个字符都使用2字节的原Unicode编码传输，其第一字节的8位始终为0。这就造成了比较大的浪费。对于这种情况，可以使用UTF-8编码，这是一种变长编码，它将基本7位ASCII字符仍用7位编码表示，占用一个字节（首位补0）。
代码点是一个整数值，通常以基数16表示。
一个Unicode字符串是一个代码点序列，它们是从0到0x10FFFF（1,114,111十进制）的数字该序列需要表示为内存中的一组字节（意为0到255之间的值）
将Unicode字符串转换为字节序列的规则称为编码。

UTF-8是最常用的编码之一。UTF代表“Unicode转换格式”，“8”表示编码中使用8位数字。（还有一个UTF-16和UTF-32编码，但是它们比UTF-8更少使用。）UTF-8使用以下规则：
如果代码点<128，则由相应的字节值表示。
如果代码点是> = 128
则将其转换为两个，三个或四个字节的序列，其中序列的每个字节都在128到255之间

UTF-8有几个方便的属性：

1.它可以处理任何Unicode代码点。
2.Unicode字符串变成一个不包含嵌入零字节的字节序列。这避免了字节排序问题，并且意味着UTF-8字符串可以由C函数处理，例如strcpy()通过不能处理零字节的协议发送。
3.一串ASCII文本也是有效的UTF-8文本。
4.UTF-8相当紧凑; 大多数常用字符可以用一个或两个字节表示。
5.如果字节损坏或丢失，可以确定下一个UTF-8编码代码点的开始并重新同步。随机的8位	数据也不太可能看起来像是有效的UTF-8。

Python Unicode
使用chr() 内置函数创建单字符Unicode字符串，该函数采用整数并返回长度为1的包含相应代码点的Unicode字符串。反向操作是内置ord()函数，它使用一个字符的Unicode字符串并返回代码点值：
>>> chr （57344 ）
'\ ue000' 
>>> ord （' \ ue000 ' ）
57344

转换为字节
相反的方法bytes.decode()是str.encode()返回bytes编码在所请求的编码中的Unicode字符串的表示。


Python中的Unicode文字源代码
在Python源代码中，可以使用\u转义序列来编写特定的Unicode代码点 ，后面是四位十六进制数字，提供代码点。该\U转义序列是相似的，但预计8个六角数字，而不是4：
>>> s = "a\xac\u1234\u20ac\U00008000"
>>> [ord(c) for c in s]
[97, 172, 4660, 8364, 32768]


Python 3.X中的文件对象模型
str -----Unicode文本
bytes,bytearray-----二进制数据

·文本文件的内容始终是一个str字符串--字符构成的序列(Unicode代码点)
·二进制文件包含原始的8为字节

在实践中，文本文件用于所有真正文本相关数据，二进制文件则用于存储内容，例如打包的二进制数据，图像，音频和可执行文件

使用内建文件对象
open(BIF)
读取数据：read,readline,readlines
写入数据：write,writelines,
释放系统资源:close
移动到文件的任意位置：seek
将输出缓存区中的数据强制移动到次磁盘：flush
获取底层文件的句柄:fileno

确定文件关闭：异常处理器与上下文管理器
try finally 语句  with语句
with open(filename,'w') as myfile:
	...process myfile,auto-closed on statement exit...
with语句仅适用于支持上下文管理器协议的对象

read readlines 一次性将文件加载到内存当中，所以对于大文件来说比较消耗内存
readline read(N)仅能抓取文件的一部分，但是灵活性更强

使用文件迭代器读取行
file=open('data.txt')
for line in file:
	print(line.end='')

文本文件的Unicode编码
对外部文件进行双向传输的时，文本模式的文件对象根据默认或指定的Unicode编码类型来转换数据。
这些内容在文件里是编码的形式，在内存中则是解码后的形式。
二进制文件不执行这些转换。


文本文件的换行符转换
Unix平台 \n   			Windows平台 \r\n
当Python脚本运行与Windows
· 对于文本模式下打开的文件，输入时\r\n会转换为\n
· 对于文本模式下打开的文件，输出时\n会转换为\r\n
· 对于二进制模式下打开的文件，不发生任何转换。


用struct模块解析打包的二进制数据
该模块执行Python值和表示为Python bytes对象的C结构体之间的转换
将不同类型的数据以二进制的形式进行打包，网络传输后进行还原。

随机访问文件
seek

os模块中的底层文件工具
os.open(path,flags,mode)
os.read(descriptor,N)
os.write(descriptor,string)
os.lseek(descriptor,position,how)

目录工具
os.popen 运行shell命令
glob
os.listdir

遍历目录树
os.walk 在树的每个目录中，它产生三个项目的元组，包括当前目录的名称，以及当前目录下所有文件
组成的列表和所有子目录组成的列表。