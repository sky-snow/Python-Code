glob  用于文件名扩展
socket 用于网络连接和进程通信（IPC）
threading,_thread,queue 用于运行和同步化线程
time，timeit 用于获取系统时间和相关细节
subprocess,multiprocessing 用于启动和控制并行进程
signal，select，shutil,tempfile 用于多种系统相关任务

bytearray.splitlines（keepends = False）
返回二进制序列中的行列表，以ASCII行边界打破。 这种方法使用通用换行符来分割线。 换行符不包括在结果列表中，除非给定和true

>>> b'ab c\n\nde fg\rkl\r\n'.splitlines()
[b'ab c', b'', b'de fg', b'kl']
>>> b'ab c\n\nde fg\rkl\r\n'.splitlines(keepends=True)
[b'ab c\n', b'\n', b'de fg\r', b'kl\r\n']

bytearray.split（sep = None，maxsplit = -1）
将二进制序列拆分为相同类型的子序列，使用sep作为分隔符字符串。 如果给出maxsplit和非负数，则最多可以完成maxsplit拆分（因此，该列表最多将具有maxsplit + 1个元素）。 如果没有指定maxsplit或是-1，则对分割数没有限制（所有可能的分割）。

>>> b'1,2,3'.split(b',')
[b'1', b'2', b'3']
>>> b'1,2,3'.split(b',', maxsplit=1)
[b'1', b'2,3']
>>> b'1,2,,3,'.split(b',')
[b'1', b'2', b'', b'3', b'']

字符串切片
用冒号分隔两个索引，形式为：变量[头下标:尾下标]
冒号之前的数字表示开始的位置，冒号之后的数字表示结束的位置。这是一个左闭右开区间，也就是说这个字符串包含头下标，但是不包含尾下标。

Python的数据有两种索引方式：最左边以0开始，依次增加；最右边的元素索引为-1，往左依次减少

-5  -4  -3  -2  -1
h  	 e   l   l   o
 0   1   2   3   4

 [1:4]=123=ell

步长切片截取

步长截取，不同于之前的切片截取操作，它是按一定“步数”来取值的。

使用语法是：使用两个冒号 [x::y]
x表示从x开始，y表示走y步取一个值，依次到取完为止。比如取之前的str [1::3]，即从第二个字符开始，每隔3个位移取一个值，结果为eo
1.字符串常量
string.ascii_letters           
string.ascii_lowercase		   	小写字母'abcdefghijklmnopqrstuvwxyz'
string.ascii_uppercase         	大写字母'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
string.digits				   	字符串'0123456789'
string.hexdigits				字符串'0123456789abcdefABCDEF'
string.octdigits				字符串'01234567'
string.punctuation				在本C地区中被视为标点符号的ASCII字符串。
string.printabel													被视为可打印的ASCII字符串。这是一个组合digits，ascii_letters，
									    punctuation，和whitespace
string.whitespace
2.自定义字符串格式
模块中的Formatter类string允许您使用与内置format()方法相同的实现来创建和自定义您自己的字符串格式化行为。
format（format_string，* args，** kwargs ）
主要API方法。它需要格式字符串和任意位置和关键字参数。
它只是一个包装器调用vformat()


常用字符串操作函数
find()
>>> mystr='xxxSPAMxxx'
>>> mystr.find('SPAM')
3

replace()
>>> mystr.replace('SPAM','aa')
'xxxaaxxx'

字符串搜索/测试
>>> mystr
'xxxSPAMxxx'
>>> 'aa' in mystr
False
>>> 'SPAM'in mystr
True

取出空白分隔符
>>> mystr='\t Ni\n'
>>> mystr.strip()
'Ni'
>>> mystr.rstrip()
'\t Ni'
>>> mystr.lstrip()
'Ni\n'

大小写转换
>>> mystr='SHRUBBERY'
>>> mystr.lower()
'shrubbery'
>>> mystr
'SHRUBBERY'
>>> mystr='shrubbery'
>>> mystr.upper()
'SHRUBBERY'
>>> mystr
'shrubbery'

内容测试
1-1判断是否为ASCII字符字母或者数字
>>> mystr
'shrubbery'
>>> mystr.isalnum()
True

1-2判断序列中的所有字节都是字母ASCII字符，并且序列不为空。
>>> mystr.isalpha()
True

1-3判断序列中的所有字节都是数字ASCII字符，并且序列不为空
>>> mystr.isdigit()
False

字符串拼接
第一种方法
>>> a='abcedcc'
>>> d='ccbced'
>>> a+d
abcedccccbced

第二种方法 格式化输出
>>> print "my name is %s"%"sky"    
my name is sky

%s叫做占位符， 是字符串的占位符， %d是数字的占位符，二者不可以混用，只能匹配相同类型。

第三种方法 格式化函数输出
>>> b="this is {} {}".format("my","apple")  ||使用format格式化数据，也可以将俩个大括号看做是占位符，后面则是需要添加进去的
>>> b
'this is my apple'

>>> b="this is {1} {0}".format("apple","my") ||对于下边的使用与后面的参数下标匹配
>>> b
'this is my apple'

>>> b="this is {whose} {fruit}".format(whose="my",fruit="apple")
>>> b
'this is my apple'

第四种方法（推荐）
函数：string.join()
>>> delim='NI'
>>> delim.join(['aaa','bbb','ccc'])
'aaaNIbbbNIccc'
Python中有join()和os.path.join()两个函数，具体作用如下：
    join()：    连接字符串数组。将字符串、元组、列表中的元素以指定的字符(分隔符)连接生成一个新的字符串
    os.path.join()：  将多个路径组合后返回

转换为字符组成的列表
>>> chars=list('hello')
>>> chars
['h', 'e', 'l', 'l', 'o']

生成字符串，分隔符为空
>>> ''.join(chars)
'hello'

字符串转换为整型
>>> a=int('42')
>>> type(a)
<class 'int'>
>>> b=eval('42')
>>> type(b)
<class 'int'>

整型转换为字符串
<class 'int'>
>>> c=str(42)
>>> type(c)
<class 'str'>
>>> d=repr(42)
>>> type(d)
<class 'str'>

连接与加法
>>> '42'+str(1),int('42')+1
('421', 43)